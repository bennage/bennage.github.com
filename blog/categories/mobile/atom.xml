<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Christopher Bennage]]></title>
  <link href="http://dev.bennage.com/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://dev.bennage.com/"/>
  <updated>2013-09-07T14:14:12-07:00</updated>
  <id>http://dev.bennage.com/</id>
  <author>
    <name><![CDATA[Christopher Bennage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Development: Detecting Devices &amp; Features]]></title>
    <link href="http://dev.bennage.com/blog/2011/10/19/mobile-developent-and-device-detection/"/>
    <updated>2011-10-19T16:01:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2011/10/19/mobile-developent-and-device-detection</id>
    <content type="html"><![CDATA[<p><em>Take this post cum granlis salis. I'm trying to figure this stuff out and I'm thinking out loud.</em></p>

<h2>Background</h2>

<p>Whenever a browser makes a request, it includes a string identifying itself to the server. We commonly refer to this as the <em>user agent string</em>. This string identifies the browser and the platform and the version and a great deal more such nonsense.</p>

<!-- more -->


<p><img class="right" src="/images/posts/tower-babel.jpg"></p>

<p>This sounds great in theory. We should be able to use this data to optimize what's being sent to the (mobile) browser. However, there's been something of a <a href="http://webaim.org/blog/user-agent-string-history/" title="History of the browser user-agent string by Aaron Andersen">sordid history for user agent strings</a>. In retrospect, we've realized that <a href="http://en.wikipedia.org/wiki/User_agent#User_agent_sniffing">user agent sniffing</a> is a tool that has often hurt more than it has helped.</p>

<p>We've learned to <em>favor feature detection over browser detection</em> (or device detection). Take a look at <a href="http://www.modernizr.com/">modernizr</a> and <a href="http://haz.io/">haz.io</a> for more on the that front.  The success of feature detection has also resulted in a shift from server logic to client logic. We detect features on the client but we detect user agent strings on the server, before we send anything to the client.</p>

<p>How does all this play into the mobile web? One of the key mobile features we are interested in is <em>screen size</em>. Luckily for us, the W3C has blessed us with <a href="http://www.w3.org/TR/css3-mediaqueries/">media queries</a>. In a nutshell, media queries allow you to conditionally apply CSS based properties of the display device. This has given rise to something known as <a href="http://www.alistapart.com/articles/responsive-web-design/">Responsive Web Design</a>. Responsive Web Design is about having a single set of markup whose layout can <em>respond</em> to the device's display capabilities. Unfortunately, there are a few <a href="http://www.webdesignshock.com/responsive-design-problems/">rough edges</a> with this approach.</p>

<h2>Moving Backwards…</h2>

<p>In the mobile world, client-side feature detection has a few drawbacks. It requires extra code to be sent to the browsers and it takes additional processing on the client. It's also likely that you'll end up sending more than is really needed (or that you'll need to make additional requests).</p>

<p>One solution to this conundrum is to use the open source "database" called <a href="http://wurfl.sourceforge.net/">WURLF</a>. You can query WURL with a user agent string and it will return a set of capabilities. I think of it as <em>feature detection</em> on the server. Though admittedly it's a bit misleading to call it that.</p>

<p>This means your server can ask questions like "Does this client support HTML5? If no, what do they support?" before the first response is even sent.</p>

<p>WURLF has <a href="http://scientiamobile.com/">commercial support</a> and a <a href="http://wurfl.sourceforge.net/dotNet/">C# API</a>. For ASP.NET developers, <a href="http://51degrees.mobi/">51Degrees</a> has an open source project called <a href="http://51degrees.codeplex.com/">Foundation</a> that is built on top of WURL. It uses an HttpModule to automatically query WURL and populate the <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest">Request.Browser</a>. Setting up WURLF without Foundation takes a little bit more work, but not too much. Both are available on Nuget: <a href="http://www.nuget.org/List/Packages/WURFL_Official_API">WURL</a> and <a href="http://nuget.org/List/Packages/51Degrees.mobi">51Degrees</a>.</p>

<h2>What should you do?</h2>

<p>I don't think that there is a cut and dry answer <em>at the moment</em>. What you do depends heavily on your target audience. If you are targeting the <a href="http://gs.statcounter.com/#mobile_browser-na-monthly-201009-201109">North American market</a> there's a good chance you'll be okay with a single set of markup, going with a responsive <a href="http://www.lukew.com/ff/entry.asp?933">mobile-first</a> design. In other words, there would be no need for something like WURLF.</p>

<p>However, you might need a <em>very broad reach</em> or you might be targeting a market heavy in <a href="http://en.wikipedia.org/wiki/Feature_phone">feature phones</a> or something else that's <a href="http://gs.statcounter.com/#mobile_browser-sa-monthly-201009-201109">very different from North America</a>. In those cases, it is good to understand your options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a New Kid on the Mobile Block]]></title>
    <link href="http://dev.bennage.com/blog/2011/10/10/being-a-new-kid-on-the-mobile-block/"/>
    <updated>2011-10-10T14:58:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2011/10/10/being-a-new-kid-on-the-mobile-block</id>
    <content type="html"><![CDATA[<p>The last few weeks I've been trying get a finger on the pulse of <em>mobile web development</em>. I wanted to identify the thought leaders, understand the big questions, and (perhaps mostly importantly) begin cataloging the practical considerations for building mobile experiences today.</p>

<p>Here's where I'm at so far...</p>

<!-- more -->


<h2>What is 'the mobile web'?</h2>

<p><span class='pullquote-right' data-pullquote='I think the distinction between mobile and desktop is fading more and more everyday.'>
The definition of <em>mobile web</em> is quickly evolving. Devices are varied and the distinctions are blurring. If you think it's as simple as iOS, Android, <em>and Windows</em> then you'll be surprised. (I do genuinely love my WP7). Personally, I think the distinction between mobile and desktop is fading more and more everyday. When I say <em>mobile web</em> I am talking about HTML-based applications and not applications that are built natively for their respective platforms. Of course, there is debate over native apps versus web apps: when is one appropriate over the over? etc, etc. This is a question when intend to address in <a href="http://liike.github.com/">Project Liike</a>.
</span></p>

<h2>Who to follow?</h2>

<p>I've been following a mishmash of people, and I must confess that my process of qualifying them has been some haphazard.
I'm compiling a <a href="http://twitter.com/#!/bennage/mobile-web" title="membership subject to change">list on twitter</a>. A number of folks on this list are signatories of <a href="http://futurefriend.ly/" title="advocates of standards based mobile web development">future friend.ly</a>.</p>

<p>Other sources I've been paying attention to are:</p>

<ul>
<li><a href="http://www.alistapart.com/">A List Apart</a> – "For people who make websites."</li>
<li><a href="http://www.smashingmagazine.com/">Smashing Magainze</a> – Lots of articles on design, web, and of course mobile.</li>
<li><a href="http://www.cloudfour.com/blog/">Cloud Four</a> – Many recent and thorough posts exploring some of the big questions in mobile.</li>
<li><a href="http://www.yiibu.com/">Yiibu</a> – They have a lot of interesting ideas, and they've done some <a href="http://www.yiibu.com/articles/practical-guide-to-nokia-browsers/">impressive work</a> for Nokia.</li>
</ul>


<p>I've also been reading through <a href="http://shop.oreilly.com/product/9780596807795.do"><em>Programming the Mobile Web</em></a> by <a href="http://twitter.com/#!/firt">Maximiliano Firtman</a>. The first few chapters are pretty scary for someone like myself who did not understand how diverse and scattered the mobile world is. (It's also funny to see how much has changed since the book was published in 2010.)</p>

<p>Anything you'd recommend?</p>

<h2>The state of things</h2>

<p><em>Caveat</em>: <em>This is just Christopher's brain dump. Consider it merely food for thought.</em></p>

<ul>
<li>There are many <a href="http://techcrunch.com/2011/02/09/html5-versus-native-apps/">compeling</a> <a href="http://www.html5rocks.com/en/mobile/nativedebate.html">reasons</a> for developing mobile web apps. Not to the complete exclusion of <a href="http://www.webmonkey.com/2010/08/how-do-native-apps-and-web-apps-compare/">native apps</a>, but <a href="http://www.phonegap.com/">maybe?</a></li>
<li>You need to understand your target market and the devices that it uses. Don't make assumptions. You might be <a href="http://gs.statcounter.com/#mobile_os-ww-monthly-201009-201109">surprised</a>.</li>
<li>The space is changing, standards are evolving, solutions are being formulated. However, if you need to you need build an app today, there is still plently of <a href="http://www.w3.org/TR/mobile-bp/" title="Yes, it's a little old but still mostly good.">pragmatic</a> <a href="http://mobilewebbestpractices.com/">advice</a>.</li>
</ul>


<p>One more thought: don't jump to conclusions. You might read about something cool like <a href="http://www.alistapart.com/articles/responsive-web-design/"><em>Responsive Web Design</em></a>, but such cool and innovative techniques can be <a href="http://www.cloudfour.com/css-media-query-for-mobile-is-fools-gold/" title="CSS Media Query for Mobile is Fool’s Gold">deceptive</a>. Research and testing is your friend.</p>
]]></content>
  </entry>
  
</feed>
