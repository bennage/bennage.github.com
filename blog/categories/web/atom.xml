<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Christopher Bennage]]></title>
  <link href="http://dev.bennage.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://dev.bennage.com/"/>
  <updated>2013-09-07T14:14:12-07:00</updated>
  <id>http://dev.bennage.com/</id>
  <author>
    <name><![CDATA[Christopher Bennage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Render Action]]></title>
    <link href="http://dev.bennage.com/blog/2012/04/27/render-action/"/>
    <updated>2012-04-27T14:21:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2012/04/27/render-action</id>
    <content type="html"><![CDATA[<p>It's common for a single web page to include data from many sources. Consider this screen shot from <a href="http://silk.codeplex.com/">Project Silk</a>. There are four separate items displayed.</p>

<p><img class="right" src="/images/posts/many-concerns.png"></p>

<p>The primary concern of the page is displaying a list of vehicles. However it also displays some statistics and a set of reminders. I labeled the stats and reminders as orthogonal because they are (in a sense) independent of the primary concern. Finally, there is the ambient data of the currently logged in user. I call this data ambient because we expect it to be present on all the pages in the application.</p>

<p>It's a common practice in MVC-style applications to map a single controller action to a view. That is, it is the responsibility of a single action to produce everything that is needed to render a particular web page.</p>

<p>The difficulty with this approach is that <em>other pages</em> often need to render the same orthogonal data. Let's examine the code for the action invoked by <code>\vehicle\list</code>.</p>

<pre><code>public ActionResult List()
{
    AddCountryListToViewBag();

    var vehicles = Using&lt;GetVehicleListForUser&gt;()
        .Execute(CurrentUserId);

    var imminentReminders = Using&lt;GetImminentRemindersForUser&gt;()
        .Execute(CurrentUserId, DateTime.UtcNow);

    var statistics = Using&lt;GetFleetSummaryStatistics&gt;()
        .Execute(CurrentUserId);

    var model = new DashboardViewModel
                    {
                        User = CurrentUser,
                        VehicleListViewModel = new VehicleListViewModel(vehicles),
                        ImminentReminders = imminentReminders,
                        FleetSummaryStatistics = statistics
                    };

    return View(model);
}
</code></pre>

<p>Disregarding how you might feel about the <code>Using&lt;T&gt;</code> method to invoke commands and other such details, I want you to focus on the fact that the controller is <em>composing</em> a model. We generate a number of smaller viewmodels and then compose them into an instance of <code>DashboardViewModel</code>. The class <code>DashboardViewModel</code> only exists to tie together the four, otherwise independent data.</p>

<p><aside></p>

<p>Personally, I prefer to avoid classes like <code>DashboardViewModel</code> and simply rely on dynamic typing in the view. However, others feel strongly about having IntelliSense support in the view.</p>

<p></aside></p>

<p>Project Silk had separate actions just to serve up JSON:</p>

<pre><code>public JsonResult JsonList()
    {
        var list = Using&lt;GetVehicleListForUser&gt;()
            .Execute(CurrentUserId)
            .Select(x =&gt; ToJsonVehicleViewModel(x))
            .ToList();

        return Json(list);
    }
</code></pre>

<p>You'll notice that both <code>JsonList</code> and <code>List</code> use the same <code>GetVehicleListForUser</code> command for retrieving their data. <code>JsonList</code> also projected the data to a slightly different viewmodel.</p>

<h2>Reducing the Code</h2>

<p>While reevaluating this code for <a href="https://github.com/liike/">Project Liike</a>, we decided to employ <a href="http://en.wikipedia.org/wiki/Content_negotiation">content negotiation</a>. That is, we wanted a single endpoint, such as <code>\vehicle\list</code>, to return different representations of the data based upon a requested format. If the browser requested JSON, then <code>\vehicle\list</code> should return a list of the vehicles in JSON. If the browser requested markup, then the same endpoint should return HTML.</p>

<p>First, we needed to eliminate the differences between the JSON viewmodel and the HTML viewmodel. Without going deep into details, this wasn't hard to do. In fact, it revealed that we had some presentation logic in the view that should not have been there. The real problem was that I wanted the action to look more like this:</p>

<pre><code>public ActionResult List()
{
    var vehicles = Using&lt;GetVehicleListForUser&gt;()
        .Execute(CurrentUserId);

    return new ContentTypeAwareResult(vehicles);
}
</code></pre>

<p>Only, the view still needed the additional data of statistics and reminders. How should the view get it?</p>

<p>We decided to use <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.html.childactionextensions.renderaction.aspx">RenderAction</a>. RenderAction allows a view to invoke another action and render the results into the current view.</p>

<p>We needed to break out the other concerns into their own actions. For the sake of example, we'll assume they are both on the <code>VehicleController</code> and named <code>Reminders</code> and <code>Statistics</code>. Each of these action would be responsible for getting a focused set of data. Then in the (imaginary) view for <code>List</code> we could invoke the actions like so:</p>

<pre><code>// List.cshtml 
&lt;ul&gt;
@foreach (var vehicle in Model)
{
    &lt;li&gt;@vehicle.Name&lt;/li&gt;
}
&lt;/ul&gt;

&lt;section role="reminders"&gt;
@{ Html.RenderAction( "Reminders", "Vehicle") }
&lt;/section&gt;

&lt;section role="statistics"&gt;
@{ Html.RenderAction( "Statistics", "Vehicle") }
&lt;/section&gt;
</code></pre>

<p><aside></p>

<p>Note that each action has it's on associated view.</p>

<p></aside></p>

<p>The value of using RenderAction is that we where able to create very simple actions on our controllers. We were also able to reuse the actions for rendering both markup and JSON.</p>

<p>A secondary benefit is the separation of concerns. For example, because we moved the responsibility of composition from the controller into the view, a designer could now revise the view for the <code>\vehicle\list</code> without needing to touch the code. They could remove any of the orthogonal concerns or even add new ones without introducing any breaking changes.</p>

<h2>The Downside</h2>

<p>There are a few caveats with this approach.</p>

<p>First, don't confuse RenderAction with <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.html.renderpartialextensions.renderpartial.aspx">RenderPartial</a>. RenderAction is for invoking a completely independent action, with its own view and model. RenderPartial is simply for renders a view based on a model passed to it (generally derived from the main viewmodel).</p>

<p>Secondly, avoid using RenderAction to render a form. It's likely won't work the way you'd expect.This means that any form rendering will need to occur in your primary view.</p>

<p>Thirdly, using RenderAction breaks the <a href="http://en.wikipedia.org/wiki/Model-view-controller#Overview">model-view-controller</a> pattern. What I mean is that, in MVC, it's assumed that the view does nothing more than render a model. Controllers invoke a view, and not vice versa. Using RenderAction breaks this rule. Personally, I have no problem breaking the rule when it results in code that is more simple and more easily maintained. Isn't that the whole <a href="/blog/2008/03/30/the-roots-of-best-practices/">point of best practices</a> anyway?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Development: Detecting Devices &amp; Features]]></title>
    <link href="http://dev.bennage.com/blog/2011/10/19/mobile-developent-and-device-detection/"/>
    <updated>2011-10-19T16:01:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2011/10/19/mobile-developent-and-device-detection</id>
    <content type="html"><![CDATA[<p><em>Take this post cum granlis salis. I'm trying to figure this stuff out and I'm thinking out loud.</em></p>

<h2>Background</h2>

<p>Whenever a browser makes a request, it includes a string identifying itself to the server. We commonly refer to this as the <em>user agent string</em>. This string identifies the browser and the platform and the version and a great deal more such nonsense.</p>

<!-- more -->


<p><img class="right" src="/images/posts/tower-babel.jpg"></p>

<p>This sounds great in theory. We should be able to use this data to optimize what's being sent to the (mobile) browser. However, there's been something of a <a href="http://webaim.org/blog/user-agent-string-history/" title="History of the browser user-agent string by Aaron Andersen">sordid history for user agent strings</a>. In retrospect, we've realized that <a href="http://en.wikipedia.org/wiki/User_agent#User_agent_sniffing">user agent sniffing</a> is a tool that has often hurt more than it has helped.</p>

<p>We've learned to <em>favor feature detection over browser detection</em> (or device detection). Take a look at <a href="http://www.modernizr.com/">modernizr</a> and <a href="http://haz.io/">haz.io</a> for more on the that front.  The success of feature detection has also resulted in a shift from server logic to client logic. We detect features on the client but we detect user agent strings on the server, before we send anything to the client.</p>

<p>How does all this play into the mobile web? One of the key mobile features we are interested in is <em>screen size</em>. Luckily for us, the W3C has blessed us with <a href="http://www.w3.org/TR/css3-mediaqueries/">media queries</a>. In a nutshell, media queries allow you to conditionally apply CSS based properties of the display device. This has given rise to something known as <a href="http://www.alistapart.com/articles/responsive-web-design/">Responsive Web Design</a>. Responsive Web Design is about having a single set of markup whose layout can <em>respond</em> to the device's display capabilities. Unfortunately, there are a few <a href="http://www.webdesignshock.com/responsive-design-problems/">rough edges</a> with this approach.</p>

<h2>Moving Backwards…</h2>

<p>In the mobile world, client-side feature detection has a few drawbacks. It requires extra code to be sent to the browsers and it takes additional processing on the client. It's also likely that you'll end up sending more than is really needed (or that you'll need to make additional requests).</p>

<p>One solution to this conundrum is to use the open source "database" called <a href="http://wurfl.sourceforge.net/">WURLF</a>. You can query WURL with a user agent string and it will return a set of capabilities. I think of it as <em>feature detection</em> on the server. Though admittedly it's a bit misleading to call it that.</p>

<p>This means your server can ask questions like "Does this client support HTML5? If no, what do they support?" before the first response is even sent.</p>

<p>WURLF has <a href="http://scientiamobile.com/">commercial support</a> and a <a href="http://wurfl.sourceforge.net/dotNet/">C# API</a>. For ASP.NET developers, <a href="http://51degrees.mobi/">51Degrees</a> has an open source project called <a href="http://51degrees.codeplex.com/">Foundation</a> that is built on top of WURL. It uses an HttpModule to automatically query WURL and populate the <a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest">Request.Browser</a>. Setting up WURLF without Foundation takes a little bit more work, but not too much. Both are available on Nuget: <a href="http://www.nuget.org/List/Packages/WURFL_Official_API">WURL</a> and <a href="http://nuget.org/List/Packages/51Degrees.mobi">51Degrees</a>.</p>

<h2>What should you do?</h2>

<p>I don't think that there is a cut and dry answer <em>at the moment</em>. What you do depends heavily on your target audience. If you are targeting the <a href="http://gs.statcounter.com/#mobile_browser-na-monthly-201009-201109">North American market</a> there's a good chance you'll be okay with a single set of markup, going with a responsive <a href="http://www.lukew.com/ff/entry.asp?933">mobile-first</a> design. In other words, there would be no need for something like WURLF.</p>

<p>However, you might need a <em>very broad reach</em> or you might be targeting a market heavy in <a href="http://en.wikipedia.org/wiki/Feature_phone">feature phones</a> or something else that's <a href="http://gs.statcounter.com/#mobile_browser-sa-monthly-201009-201109">very different from North America</a>. In those cases, it is good to understand your options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a New Kid on the Mobile Block]]></title>
    <link href="http://dev.bennage.com/blog/2011/10/10/being-a-new-kid-on-the-mobile-block/"/>
    <updated>2011-10-10T14:58:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2011/10/10/being-a-new-kid-on-the-mobile-block</id>
    <content type="html"><![CDATA[<p>The last few weeks I've been trying get a finger on the pulse of <em>mobile web development</em>. I wanted to identify the thought leaders, understand the big questions, and (perhaps mostly importantly) begin cataloging the practical considerations for building mobile experiences today.</p>

<p>Here's where I'm at so far...</p>

<!-- more -->


<h2>What is 'the mobile web'?</h2>

<p><span class='pullquote-right' data-pullquote='I think the distinction between mobile and desktop is fading more and more everyday.'>
The definition of <em>mobile web</em> is quickly evolving. Devices are varied and the distinctions are blurring. If you think it's as simple as iOS, Android, <em>and Windows</em> then you'll be surprised. (I do genuinely love my WP7). Personally, I think the distinction between mobile and desktop is fading more and more everyday. When I say <em>mobile web</em> I am talking about HTML-based applications and not applications that are built natively for their respective platforms. Of course, there is debate over native apps versus web apps: when is one appropriate over the over? etc, etc. This is a question when intend to address in <a href="http://liike.github.com/">Project Liike</a>.
</span></p>

<h2>Who to follow?</h2>

<p>I've been following a mishmash of people, and I must confess that my process of qualifying them has been some haphazard.
I'm compiling a <a href="http://twitter.com/#!/bennage/mobile-web" title="membership subject to change">list on twitter</a>. A number of folks on this list are signatories of <a href="http://futurefriend.ly/" title="advocates of standards based mobile web development">future friend.ly</a>.</p>

<p>Other sources I've been paying attention to are:</p>

<ul>
<li><a href="http://www.alistapart.com/">A List Apart</a> – "For people who make websites."</li>
<li><a href="http://www.smashingmagazine.com/">Smashing Magainze</a> – Lots of articles on design, web, and of course mobile.</li>
<li><a href="http://www.cloudfour.com/blog/">Cloud Four</a> – Many recent and thorough posts exploring some of the big questions in mobile.</li>
<li><a href="http://www.yiibu.com/">Yiibu</a> – They have a lot of interesting ideas, and they've done some <a href="http://www.yiibu.com/articles/practical-guide-to-nokia-browsers/">impressive work</a> for Nokia.</li>
</ul>


<p>I've also been reading through <a href="http://shop.oreilly.com/product/9780596807795.do"><em>Programming the Mobile Web</em></a> by <a href="http://twitter.com/#!/firt">Maximiliano Firtman</a>. The first few chapters are pretty scary for someone like myself who did not understand how diverse and scattered the mobile world is. (It's also funny to see how much has changed since the book was published in 2010.)</p>

<p>Anything you'd recommend?</p>

<h2>The state of things</h2>

<p><em>Caveat</em>: <em>This is just Christopher's brain dump. Consider it merely food for thought.</em></p>

<ul>
<li>There are many <a href="http://techcrunch.com/2011/02/09/html5-versus-native-apps/">compeling</a> <a href="http://www.html5rocks.com/en/mobile/nativedebate.html">reasons</a> for developing mobile web apps. Not to the complete exclusion of <a href="http://www.webmonkey.com/2010/08/how-do-native-apps-and-web-apps-compare/">native apps</a>, but <a href="http://www.phonegap.com/">maybe?</a></li>
<li>You need to understand your target market and the devices that it uses. Don't make assumptions. You might be <a href="http://gs.statcounter.com/#mobile_os-ww-monthly-201009-201109">surprised</a>.</li>
<li>The space is changing, standards are evolving, solutions are being formulated. However, if you need to you need build an app today, there is still plently of <a href="http://www.w3.org/TR/mobile-bp/" title="Yes, it's a little old but still mostly good.">pragmatic</a> <a href="http://mobilewebbestpractices.com/">advice</a>.</li>
</ul>


<p>One more thought: don't jump to conclusions. You might read about something cool like <a href="http://www.alistapart.com/articles/responsive-web-design/"><em>Responsive Web Design</em></a>, but such cool and innovative techniques can be <a href="http://www.cloudfour.com/css-media-query-for-mobile-is-fools-gold/" title="CSS Media Query for Mobile is Fool’s Gold">deceptive</a>. Research and testing is your friend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restarting Node.js When Your Source Changes]]></title>
    <link href="http://dev.bennage.com/blog/2011/08/09/restarting-node-when-your-source-changes/"/>
    <updated>2011-08-09T04:47:00-07:00</updated>
    <id>http://dev.bennage.com/blog/2011/08/09/restarting-node-when-your-source-changes</id>
    <content type="html"><![CDATA[<p>I’m lazy. I remember reading somewhere that that was a desirable trait to have in a developer. I’m not sure where though, and honestly it’s just too much effort to bingle it. This laziness came to the forefront recently as I was playing with Node.</p>

<p>In my last post, I showed you how to spin up a quick web app using Node. As I was playing with this app, I found that I had to restart Node every time I made a change to the source. This meant I had to switch to the console, stop the process, start the process and THEN refresh my page to see the effect of my change. Too much work I say.</p>

<!--more-->


<p>So I wondered if Node had something built-in for monitoring changes to the file. I didn’t see anything useful from <code>node.exe –help</code> and researching it on the Web is just so tedious, so I decided to write my own solution.</p>

<h2>Looking for Some Change</h2>

<p>In .NET, there is a class <code>System.IO.FileSystemWatcher</code>. With an instance of this class you can monitor the files in a directory for changes. I set it up like this:</p>

<pre><code>var watcher = new FileSystemWatcher(); 
watcher.Path = @"C:\node.js\stuff"; 
watcher.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName; 
watcher.Filter = "*.js"; 

watcher.Changed += Changed; 
watcher.Created += Changed; 
watcher.Deleted += Changed; 
watcher.Renamed += Renamed; 

// Begin watching 
watcher.EnableRaisingEvents = true;
</code></pre>

<p>The <code>NotifyFilter</code> property allows you to specify the sort of changes you are interested in. You can check out the full list here. You’ll also notice that I used the <code>Filter</code> property to narrow it down just to js files.</p>

<p>Next, there are a number of events to wire to respond to changes. I reused the same handler as much as I could because I always want to do the same thing: restart Node. It’s also not entirely obvious how these events relate to <code>NotifyFilter</code>, but I didn’t dig too deep into that. (I’m lazy remember.)</p>

<p>It’s also important to set <code>EnableRaisingEvents</code>. If you don’t, then the (guess what) no event are raised.</p>

<h2>Kill, Kill, Kill</h2>

<p>Now whenever a significant change occurs, it’ll be time to restart Node. For this I used <code>System.Diagnostics.Process</code>. This is a bit of a tricky classs, with a number of not-so-obvious knobs to turn.</p>

<p>First, I’ll need to get a reference to the Node process. I noticed in Task Manager that the process name was “node”. So I used <code>Process.GetProcessesByName("node")</code>.</p>

<p>This returns an array of processes, and so I did this:</p>

<pre><code>var matches = Process.GetProcessesByName("node");  

matches.ToList().ForEach(match =&gt; {  
    Console.WriteLine("attempting to close node.js [" + match.Id + "]");  
    match.Kill();  
    match.WaitForExit(300); // it shouldn’t take this long, we’re just being cautious  
    Console.WriteLine("successfully closed");  
});
</code></pre>

<p>Admittedly, this is hitting it with a hammer. It’s okay, because this is just a quick and dirty helper tool for me and not a production application.</p>

<p>After killing the process, I’ll want to start another one. Now, I don’t care for another console window to pop up each time I restart, instead I’d like to simply redirect the input and output to my little helper app. This can be a little tricky, and I had to do some experimentation to find the right combination in order keep things from hanging. If you find it misbehaving, I recommend searching StackOverflow. I found several useful questions there. One of the keys that came up more than once was capturing and closing the stream for the standard input.</p>

<pre><code>var start = new ProcessStartInfo();  
start.FileName = @"C:\node.js\node.exe";  
// start the process directly, as opposed to going thu the shell  
start.UseShellExecute = false; 
// we don’t want a new window  
start.CreateNoWindow = true; 
start.RedirectStandardOutput = true;  
start.RedirectStandardInput = true;  
start.Arguments = Path.Combine(@"C:\node.js\stuff", @"server.js");  

var node = new Process();  
node.EnableRaisingEvents = true;  
node.OutputDataReceived += OutputHandler;  
node.StartInfo = start;  
node.Start();  

// refresh the metadata stored in the instance of Process   
node.Refresh();
Console.WriteLine(node.ProcessName);  
Console.WriteLine("[" + node.Id + "] node.exe started");  

// close the input, we won't use it  
var input = node.StandardInput;  
input.Close();  

// and now for the output  
node.BeginOutputReadLine();  
</code></pre>

<p>First we create an object that contains the configuration for starting an instance of Node. Notice that we are passing in the server.js file as an argument.</p>

<p>Also note that after starting the process, I call <code>Refresh</code>. I need to do this so that I’ll have the correct info to write out to the console. This data is not captured automatically.</p>

<p>Finally, I handled the redirection of the input and output.</p>

<p>The complete code for the app is available at <a href="https://gist.github.com/1108727">https://gist.github.com/1108727</a>.</p>

<h2>Epilogue</h2>

<p>This is very much a hack and I am not an expert on the proper usage of these classes. Please feel free to offer improvements.</p>
]]></content>
  </entry>
  
</feed>
